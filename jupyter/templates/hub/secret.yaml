{{- if not .Values.hub.existingSecret }}
kind: Secret
apiVersion: v1
metadata:
  name: hub-secret
  labels:
    {{- include "jupyterhub.labels" . | nindent 4 }}
type: Opaque
data:
  {{- $values := merge dict .Values }}
  {{- /* preserve behavior of deprecated hub.extraConfigMap */}}
  {{- $_ := set $values "custom" (merge dict $values.custom .Values.hub.extraConfigMap) }}
  {{- /* passthrough subset of Chart / Release */}}
  {{- $_ := set $values "Chart" (dict "Name" .Chart.Name "Version" .Chart.Version) }}
  {{- $_ := set $values "Release" (pick .Release "Name" "Namespace" "Service") }}
  values.yaml: {{ $values | toYaml | b64enc | quote }}

  # Used to mount CONFIGPROXY_AUTH_TOKEN on hub/proxy pods for mutual trust
  proxy.token: {{ .Values.proxy.secretToken | required "Proxy token must be a 32 byte random string generated with `openssl rand -hex 32`!" | b64enc | quote }}

  {{- with .Values.hub.db.password }}
  # Used to mount MYSQL_PWD or PGPASSWORD on hub pod
  hub.db.password: {{ . | b64enc | quote }}
  {{- end }}

  {{- range $key, $service := .Values.hub.services }}
  {{- if $service.apiToken }}
  # Potentially used to mount on an external service in the k8s cluster
  services.token.{{$key}}: {{ $service.apiToken | b64enc | quote }}
  {{- end }}
  {{- end }}

  {{- if .Values.auth.state.enabled }}
  # Used to mount JUPYTERHUB_CRYPT_KEY on hub pod, used by authenticators
  auth.state.crypto-key: {{ .Values.auth.state.cryptoKey | required "Encryption key is required for auth state to be persisted!" | b64enc | quote }}
  {{- end }}
{{- end }}
